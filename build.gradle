buildscript {
  repositories {    
    mavenCentral()
  }
  dependencies {
  }
}
/** */
//apply plugin: 'java'
//apply plugin: 'groovy'
/** Project managment, IDEs, and deploy     */
//apply plugin: 'eclipse'
apply plugin: 'maven'
/** Code quality and reporting     */
//apply plugin: 'code-quality'
//apply plugin: 'project-report'

version = '0.0.1-SNAPSHOT'
archivesBaseName = 'tcserver-tools'
artifact="${name}-${version}"

buildArtifact="build/${artifact}"
//sourceCompatibility = '1.6'
//targetCompatibility = '1.5'

task clean(type:Delete){
  //making sure we have the right privs.
  if ( file(buildArtifact).exists() ){
    ant.chmod( dir:buildArtifact, perm:"644", excludes:"**/*.sh")
    ant.chmod( dir:buildArtifact, perm:"755", includes:"**/*.sh")
  }
  delete 'build'
  delete 'dist'
}

/** */
task docs {
    description = 'Builds the documentation'
}
task distCopy() {
    file(buildArtifact).mkdirs()
    ant.copy(todir: "$buildArtifact/bin" ){
      ant.fileset( dir: "src/main/bin" )
    }
    ant.copy(todir: "$buildArtifact/templates"){
      ant.fileset( dir: "src/main/templates")
    }
    ant.copy(todir: "$buildArtifact/samples"){
      ant.fileset( dir:"src/main/samples" ){
	exclude( name:"**/*.log" )
	exclude( name:"**/*.out" )
      }
    }
    ant.fixcrlf( srcdir:buildArtifact, includes:"**/*.sh", eol:"lf", eof:"remove") 
    ant.chmod( dir:buildArtifact, perm:"644", excludes:"**/*.sh")
    ant.chmod( dir:"$buildArtifact/bin", perm:"755", includes:"**/*.sh")
}
/** */
task dists {
  dependsOn distCopy
  dependsOn docs

  ant.tar(destfile: "dist/${artifact}.tar" ) {
    ant.tarfileset(dir: "build/${artifact}", prefix:"${artifact}")
  }
  ant.gzip(destfile: "dist/${artifact}.tar.gz", src:"dist/${artifact}.tar")
}

/** */
dists {
  description = 'Builds the distribution'
  group = 'build'

}
